generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email           String  @unique
  phoneNumber     String?
  hash            String?
  hashedRt        String?
  googleId        String? @unique
  isGoogleAccount Boolean @default(false)

  // Profile information
  firstName    String?
  lastName     String?
  displayName  String?
  profileImage String?
  locale       String?
  provider     String? // 'google', 'local', etc.

  role Role @default(USER)

  // Relations
  tickets         Ticket[]
  replies         Reply[]
  assignedTickets Ticket[] @relation("AssignedTickets")

  @@map("users")
}

enum Role {
  USER
  AGENT
}

model Ticket {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject String
  status  TicketStatus @default(OPEN)

  // Customer who created the ticket
  customerId String
  customer   User   @relation(fields: [customerId], references: [id])

  // Agent assigned to the ticket (optional)
  assignedToId String?
  assignedTo   User?   @relation(name: "AssignedTickets", fields: [assignedToId], references: [id])

  // Ticket content and replies
  replies Reply[]

  @@map("tickets")
}

enum TicketStatus {
  OPEN
  CLOSED
}

model Reply {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  content String

  // Author of the reply
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  // Associated ticket
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id])

  @@map("replies")
}
